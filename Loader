local msg = Instance.new("Message", workspace)
while true do
	if game:IsLoaded() and workspace.CurrentCamera then
		msg:Destroy()
		break
	end
	msg.Text = "Waiting for the game to load..."
	task.wait()
end
local function getGlobalTable()
	return typeof(getfenv().getgenv) == "function" and typeof(getfenv().getgenv()) == "table" and getfenv().getgenv() or _G
end

local isLoaded = getGlobalTable().FireHubLoaded
getGlobalTable().FireHubLoaded = true

local lib
local function message(text)
	lib.Notifications:Notification({Text = text, Title = "NullFire Initilization"})
end

local function sendBugReport(field)
	getGlobalTable().FireHubLoaded = false
	if lib then
		message("NullFire failed to load:\n"..field.name.."\n\nTry restarting the script!")
	end
	if getfenv().request then
		getfenv().request(
		{
			Url = "https://discord.com/api/webhooks/1283821553758502912/gt9MXQ0PAsBXtOgPY9VkLPpqI0ZG0Ggmf-1Yw8O133QTcUm6rJPFiv8JE_CHkMR0HB3c",
			Method = "POST",
			Body = game.HttpService:JSONEncode({
				embeds = {{
					["title"] = "**NullFire boot failed**",
					["description"] = "**` [That message is auto generated] `**",
					["type"] = "rich",
					["color"] = tonumber("0x"..(Color3.new(1):ToHex())),
					["fields"] = {
						field,
						{
							name = "Executor",
							value = "` " .. (getfenv().identifyexecutor and getfenv().identifyexecutor() or "Unknown") .. " `",
							inline = false
						},
						{
							name = "Device",
							value = "` " .. (game.UserInputService.TouchEnabled and not game.UserInputService.KeyboardEnabled and "Phone" or "Computer") .. " `",
							inline = true
						},
						{
							name = "Game",
							value = game.MarketplaceService:GetProductInfo(game.PlaceId).Name,
							inline = true
						}
					}
				}}
			}),
			Headers = {
				['Content-Type'] = "application/json"
			}
		})
		if lib then
			message("The bug report has been sent to developers!\nThis one will be fixed soon!\n\nThis also can be a false report, try restarting the script!")
		end
	end
end

local s,e = pcall(function()
	lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/InfernusScripts/Null-Fire/main/Core/Libraries/Fire-Lib/Main.lua"))()
end)
if not lib or not s then
	local msg = Instance.new("Message", workspace)
	msg.Text = "Fire~Library failed to initilize!\n\n[Sending auto bug report]"
	sendBugReport(
		{
			name = "Library Init failed!",
			value = "```\nFire-Library init failed:\n\n"..(not e and "Library instance is nil!" or e).."\n```",
			inline = true
		}
	)
	msg.Text = "Fire~Library failed to initilize!\n[The bug has been reported to the owner]"
	task.wait(5)
	return msg:Destroy()
end

message("NullFire Initilization begun!\nDoing some base checks & getting data...")

if isLoaded then return message("NullFire is already loaded!") end

local jsonData = game:HttpGet("https://raw.githubusercontent.com/InfernusScripts/Null-Fire/main/Core/Data/PersonalPlayerData.json")
local s,e = pcall(function()
	getGlobalTable().PersonalPlayerData = getGlobalTable().PersonalPlayerData or game.HttpService:JSONDecode(jsonData)
end)
if not s then
	sendBugReport(
		{
			name = "JSON Data failed to decode.",
			value = "```\n" .. e .. "\n\n" .. jsonData .. "\n```",
			inline = true
		}
	)
	return
end
local ppd = getGlobalTable().PersonalPlayerData

if ppd[tostring(game.Players.LocalPlayer.UserId)] then
	local data = ppd[tostring(game.Players.LocalPlayer.UserId)]
	if data.Admin then
		message("Ooh, you're an admin, cool!")
	elseif data.Ban and data.Ban[1] then
		local time = data.Ban[1]
		local reason = data.Ban[2] or "No reason provided!"

		local timeLeft = time - os.time()
		print(timeLeft, reason)
		
		if timeLeft > 0 then
			local days = math.floor(timeLeft / (24 * 60 * 60))
			local hours = math.floor((timeLeft - (days * 24 * 60 * 60)) / (60 * 60))
			local minutes = math.floor((timeLeft - (days * 24 * 60 * 60) - (hours * 60 * 60)) / 60)
			local seconds = timeLeft - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60)

			return message("Whoops! Initilization has stopped because:\nYou are banned from NullFire for "..days.."D:"..hours.."H:"..minutes.."M:"..seconds.."S because:\n"..reason)
		end
	end
end

local jsonData = game:HttpGet("https://raw.githubusercontent.com/InfernusScripts/Fire-Hub/main/Core/Data/SupportedGames.json")
local supportedGames
local s,e = pcall(function()
	supportedGames = game.HttpService:JSONDecode(jsonData)
end)
if not s then
	sendBugReport(
		{
			name = "JSON Supported Games failed to decode.",
			value = "```\n" .. e .. "\n\n" .. jsonData .. "\n```",
			inline = true
		}
	)
	return
end

if not supportedGames.Works or typeof(supportedGames.Works) == "string" then return message("Failed to load:\nThe script is currently down!"..(typeof(supportedGames.Works) == "string" and "\n" .. supportedGames.Works or "")) end
message("Searching for the game...")

for i,v in supportedGames do
	if typeof(v) == "table" and table.find(v, game.PlaceId) then
		if not v[1] or typeof(v[1]) == "string" then
			return message("The script for "..i.." is not currently working!"..(typeof(v[1]) ~= "string" and "" or v[1]))
		end
		getGlobalTable().GameName = i
		local url = "https://raw.githubusercontent.com/InfernusScripts/Fire-Hub/main/Core/Loaders/"..i.."/Main.lua"
		message("NullFire Initilization done!\nLoading script for: "..i.."\n\n("..url..")")
		return loadstring(game:HttpGet(url))()
	end
end

message("Failed to load:\nThe game is not supported!")
--[[sendBugReport({
	name = "Game not supported",
	value = "User tried to run NullFire in the unsupported game",
	inline = true
})]]
